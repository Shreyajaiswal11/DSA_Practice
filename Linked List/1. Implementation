#include <iostream>
using namespace std;
class Node{
    public:
    int data;
    Node* next;
    Node(int d){
      data=d;
      next=NULL;
    }
};
  //Insertion At Top of linked list 
   void insertatfront(Node* &p,int val){
        if(p==NULL){
        p=new Node(val); 
        return;
        }
        else{
            Node* temp=new Node(val);
            temp->next=p;
            p=temp;
        }
    }
    // Display Linked list Iterative way 
    
  void  print(Node*p){
        while(p!=0){
            cout<<p->data<<" ";
            p=p->next;
        }
    }
//Display Linked list Recursive way 
void Rdisplay(Node*p){
    if(p!=0)
    {
        cout<<p->data<<" ";
        Rdisplay(p->next);
         
    }
} 
//Counting nodes in Linked list (iterative)
void count(Node*p){
    int count=0;
    while(p!=NULL)
    {
        count++;
        p=p->next;
    }
    cout<<count<<endl;
}
 //Counting nodes in Linked list (Recursive)
 void Rcount(Node*p){
  if(p==0)
 return 0;
 else
 return Rcount(p->next)+1; 
}
//Sum of all the nodes (Itrative)
 void sumofnode(Node*p){
      int sum=0;
      while(p!=0){
          sum+=p->data;
          p=p->next;
      }
      cout<<sum;
  }
//Recursive way to calculate sum of all nodes
int Rsum(Node*p){
    int sum=0;
    if(p==0)
    return 0;
    return Rsum(p->next)+p->data;
}
//find Maxelement from ll(iterative) 
int maxelement(Node*p){
     int max=0;
     while(p!=0){
         if(p->data>max)
         max=p->data;
         p=p->next;
     }
    return max;
 }

//find Maxelement from ll(Recursive) 
int maxelement(Node*p){
     int max=0;
    if(p==0)
    return 0;
     max=maxelement(p->next);
   if (max>p->data)
   return max;
   else
    return p->data;
 }
 //find element in linear search (iterative)
 void linearsearch(Node*p,int key){
    while(p!=0){
        if(p->data==key){
        cout<<"found"<<endl;
        return;
    }
     p=p->next;
}
    cout<<"Not found";
}
//Removing dublicate elements

int main() {
Node* p=NULL;
insertatfront(p,5);
insertatfront(p,9);
insertatfront(p,7);
insertatfront(p,7);
insertatfront(p,7);
// Rdisplay(p);
Rcount(p);

	return 0;
}
